/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import org.junit.Test;
import static org.junit.Assert.*;

public class LibraryTest {
    @Test
    public void testRollNumberOfRolls() {
        Library classUnderTest = new Library();
        int n = 3;
        int expectedOutput = 3;
        assertEquals("Number of items in array should be equal to the input number", expectedOutput, (classUnderTest.roll(n)).length);
    }

    @Test
    public void testRollBetween1and6() {
        Library classUnderTest = new Library();
        int n = 4;
        int[] outputArray = classUnderTest.roll(n);
        for (int i =0; i<n; i++){
            assertTrue("Items in array should be between 1 and 6", outputArray[i]>=1&&outputArray[i]<=6);
        }
    }

    @Test
    public void testContainsDuplicatesWithDuplicates() {
        Library classUnderTest = new Library();
        int[] arrayToTestForDuplicates = new int[] {1, 2, 3, 4};
        assertFalse("There should not be any duplicate items", classUnderTest.containsDuplicates(arrayToTestForDuplicates));

    }
    @Test
    public void testContainsDuplicatesWithoutDuplicates() {
        Library classUnderTest = new Library();
        int[] arrayToTestForDuplicates = new int[] {1, 2, 3, 4, 4};
        assertTrue("Duplicates should be found", classUnderTest.containsDuplicates(arrayToTestForDuplicates));

    }

    @Test
    public void testAverageOfArray() {
        Library classUnderTest = new Library();
        double[] arrayForAverage = new double[] {3, 2, 3, 4};
        double expectedOutput = 3;
        assertEquals("Calculate the average of the given array", expectedOutput, classUnderTest.calculatingAverages(arrayForAverage), 0);
    }

    @Test
    public void testAverageOfArrayWithOneItem() {
        Library classUnderTest = new Library();
        double[] arrayForAverage = new double[] {3};
        double expectedOutput = 3;
        assertEquals("Calculate the average of the given array", expectedOutput, classUnderTest.calculatingAverages(arrayForAverage), 0);
    }

    @Test
    public void testarrayWithLowestAverage() {
        Library classUnderTest = new Library();
        int[][] arrayToBeTested = new int[][] {
                {1, 2, 3},
                {4, 5, 6},
                {7,8,9}
        };
        int[] expectedOutput = new int[] {1,2,3};
        assertArrayEquals("Lowest average array should be returned", expectedOutput, classUnderTest.arrayWithLowestAverage(arrayToBeTested));
    }

    @Test
    public void testarrayWithLowestAverageWithTwoSameArrays() {
        Library classUnderTest = new Library();
        int[][] arrayToBeTested = new int[][] {
                {1, 2, 3},
                {4, 5, 6, 7},
                {7,8,9},
                {1,2,3}
        };
        int[] expectedOutput = new int[] {1,2,3};
        assertArrayEquals("Lowest average array should be returned", expectedOutput, classUnderTest.arrayWithLowestAverage(arrayToBeTested));
    }

    @Test
    public void testarrayWithLowestAverageWithEmptyArray() {
        Library classUnderTest = new Library();
        int[][] arrayToBeTested = new int[][] {
                {},
                {4, 5, 6},
                {7,8,9},
                {1,2,3}
        };
        int[] expectedOutput = new int[] {};
        assertArrayEquals("Lowest average array should be returned", expectedOutput, classUnderTest.arrayWithLowestAverage(arrayToBeTested));
    }
}

/* With more time, I would have implemented following tests on the features:
Feature 1:
1. If the user inputs negative number
2. If the user inputs 0 roll

Feature 2:
1. Test for array with same item listed three times
3. Test with negative integers in the array

Feature 3:
1. Test for array with negative numbers
2. Test for array with numbers with decimal points.

Feature 4:
1. Test for array with negative numbers.
 */
